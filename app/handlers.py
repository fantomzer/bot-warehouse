from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import database.requests as rq

router = Router()


class AddItem(StatesGroup):
    title = State()
    answer = State()
    number = State()


class AddSticker(StatesGroup):
    title = State()
    volume = State()


class UpdateSticker(StatesGroup):
    title = State()
    volume = State()
    change = State()
    sticker_count = State()


class UpdateItem(StatesGroup):
    title = State()
    change = State()
    number = State()


class FindItem(StatesGroup):
    title = State()


class FindSticker(StatesGroup):
    title = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await rq.set_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.first_name
    )
    await rq.del_calculate(message.from_user.id)
    await message.answer(f'–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)


@router.callback_query(F.data.startswith('–ù–∞–∑–∞–¥:'))
async def cmd_start(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await rq.del_calculate(call.message.chat.id)
    await call.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    await call.message.edit_text(f'–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)


@router.callback_query(F.data.startswith('–ù–∞–∫–ª–µ–π–∫–∏'))
async def cmd_start(call: CallbackQuery):
    await call.answer('–ù–∞–∫–ª–µ–π–∫–∏')
    await call.message.edit_text('–°–∫–ª–∞–¥: –Ω–∞–∫–ª–µ–π–∫–∏', reply_markup=kb.stickers)


@router.callback_query(F.data.startswith('sticker_'))
async def show_sort_alphabet(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∫–ª–µ–π–∫–∏')
    await callback.message.edit_text(
        '‚¨áÔ∏è–ù–∞–∫–ª–µ–π–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ‚¨áÔ∏è',
        reply_markup=await kb.stickers_view('alphabet', '–æ—Å—Ç–∞—Ç–æ–∫–ù–∞–∫'))


@router.callback_query(F.data.endswith('–ø–æ–∏—Å–∫–ù–∞–∫'))
async def item_find(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FindSticker.title)
    await callback.message.answer('‚¨áÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞‚¨áÔ∏è')


@router.message(FindSticker.title)
async def add_third(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    data = await state.get_data()
    await message.answer('‚¨áÔ∏è–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞‚¨áÔ∏è', reply_markup=await kb.find_stickers(data["title"]))


@router.callback_query(F.data.startswith('–æ—Å—Ç–∞—Ç–æ–∫–ù–∞–∫'))
async def number(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–í—ã–±–æ—Ä')
    title, volume = callback.data.split(':')[1], callback.data.split(':')[2]
    item = (await rq.show_sticker(title=title, volume=volume)).fetchone()
    await state.set_state(UpdateSticker.title)
    await state.update_data(title=title)
    await state.set_state(UpdateSticker.volume)
    await state.update_data(volume=volume)
    await state.set_state(UpdateSticker.change)
    await callback.message.edit_text(
        f'–ù–∞–∫–ª–µ–π–∫–∞: <b>{item[0]}</b>\n–û–±—ä—ë–º: <b>{item[1]}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{item[2]}</b>',
        reply_markup=await kb.choice_three())


@router.callback_query(F.data.endswith('–æ—Å—Ç–∞—Ç–æ–∫–ù–∞–∫'))
async def update_second(callback: CallbackQuery):
    await callback.answer('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞')
    type_sort = callback.data.split(':')[0]
    await callback.message.edit_text(
        '‚¨áÔ∏è–ù–∞–∫–ª–µ–π–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ‚¨áÔ∏è',
        reply_markup=await kb.stickers_view(type_sort, '–æ—Å—Ç–∞—Ç–æ–∫–ù–∞–∫'))


@router.callback_query(F.data.startswith('enter:'))
async def update_third(callback: CallbackQuery, state: FSMContext):
    res = callback.data.split(':')[1]
    await state.update_data(change=res)
    await state.set_state(UpdateSticker.sticker_count)
    await callback.message.edit_text('‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ‚¨áÔ∏è',
                                     reply_markup=await kb.add_nums_two('–∫–ª_3', 'sticker'))


@router.callback_query(F.data.in_(['–∫–ª_3:1', '–∫–ª_3:2', '–∫–ª_3:3', '–∫–ª_3:4', '–∫–ª_3:5', '–∫–ª_3:6', '–∫–ª_3:7', '–∫–ª_3:8',
                                   '–∫–ª_3:9', '–∫–ª_3:0', '–∫–ª_3:.', '–∫–ª_3:-']))
async def callback_func_two(callback: CallbackQuery, state: FSMContext):
    user_id, data = callback.message.chat.id, callback.data.split(':')[1]
    try:
        await rq.calculate_str(user_id, data)
    except Exception as exp:
        await callback.answer(f'{exp}')
    num_data = await rq.get_calculate(user_id)
    await state.update_data(number=num_data)
    await callback.message.edit_text(f'{num_data}·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ',
                                     reply_markup=await kb.add_nums_two('–∫–ª_3', '|sticker'))


@router.callback_query(F.data.endswith('|sticker'))
async def update_fourth(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(f'–ß–∏—Å–ª–æ {data["number"]} –ø—Ä–∏–Ω—è—Ç–æüìù')
    if data['change'] == '-':
        try:
            await rq.upgrade_sticker_count(data["title"], data["volume"], data["number"], data["change"])
            item = (await rq.show_sticker(data["title"], data["volume"])).fetchone()
            await callback.message.answer(f'<b>{item[0]}</b> - <b>{item[1]}</b> : <b>{item[2]}</b>')
            await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
        except ValueError as err:
            await callback.message.answer(f'‚õîÔ∏è{err}‚õîÔ∏è', reply_markup=kb.main)
    elif data['change'] == '+':
        await rq.upgrade_sticker_count(data["title"], data["volume"], data["number"], data["change"])
        item = (await rq.show_sticker(data["title"], data["volume"])).fetchone()
        await callback.message.answer(f'<b>{item[0]}</b> + <b>{item[1]}</b> : <b>{item[2]}</b>')
        await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
    await rq.del_calculate(callback.message.chat.id)
    await state.clear()


@router.callback_query(F.data.startswith('–ü–æ–∫—Ä–∞—Å–∫–∞'))
async def cmd_start(call: CallbackQuery):
    await call.answer('–ü–æ–∫—Ä–∞—Å–∫–∞')
    await call.message.edit_text('–°–∫–ª–∞–¥: –º–∞—Ç–µ—Ä–∏–∞–ª—ã', reply_markup=kb.painting)


@router.callback_query(F.data.startswith('–∏–∑–º–µ–Ω–∏—Ç—å:'))
async def update_second(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UpdateItem.title)
    res = callback.data.split(':')[1]
    await state.update_data(title=res)
    await state.set_state(UpdateItem.change)
    await callback.message.edit_text('‚¨áÔ∏è–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨áÔ∏è', reply_markup=await kb.choice('–≤—ã–±–æ—Ä–∫–æ–ª'))


@router.callback_query(F.data.startswith('–≤—ã–±–æ—Ä–∫–æ–ª:'))
async def update_third(callback: CallbackQuery, state: FSMContext):
    res = callback.data.split(':')[1]
    await state.update_data(change=res)
    await state.set_state(UpdateItem.number)
    await callback.message.edit_text('‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ‚¨áÔ∏è',
                                     reply_markup=await kb.add_nums_two('–∫–ª_2', '–≤–≤–æ–¥2'))


@router.callback_query(F.data.in_(['–∫–ª_2:1', '–∫–ª_2:2', '–∫–ª_2:3', '–∫–ª_2:4', '–∫–ª_2:5', '–∫–ª_2:6', '–∫–ª_2:7', '–∫–ª_2:8',
                                   '–∫–ª_2:9', '–∫–ª_2:0', '–∫–ª_2:.', '–∫–ª_2:-']))
async def callback_func_two(callback: CallbackQuery, state: FSMContext):
    user_id, data = callback.message.chat.id, callback.data.split(':')[1]
    try:
        await rq.calculate_str(user_id, data)
    except Exception as exp:
        await callback.answer(f'{exp}')
    num_data = await rq.get_calculate(user_id)
    await state.update_data(number=num_data)
    await callback.message.edit_text(f'{num_data}·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ',
                                     reply_markup=await kb.add_nums_two('–∫–ª_2', '–≤–≤–æ–¥2'))


@router.callback_query(F.data.endswith('–≤–≤–æ–¥2'))
async def update_fourth(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(f'–ß–∏—Å–ª–æ {data["number"]} –ø—Ä–∏–Ω—è—Ç–æüìù')
    if data['change'] == '-':
        try:
            await rq.upgrade_item_count(data["title"], data["number"], data["change"])
            item = (await rq.show_item(data["title"])).fetchone()
            await callback.message.answer(f'–¢–æ–≤–∞—Ä —É–º–µ–Ω—å—à–µ–ΩüóÇ\n–ù–∞–∑–≤–∞–Ω–∏–µ:<b>{item[0]}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{item[1]}</b>')
            await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
        except ValueError as err:
            await callback.message.answer(f'‚õîÔ∏è{err}‚õîÔ∏è', reply_markup=kb.main)
    elif data['change'] == '+':
        await rq.upgrade_item_count(data["title"], data["number"], data["change"])
        item = (await rq.show_item(data["title"])).fetchone()
        await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–ΩüóÇ\n–ù–∞–∑–≤–∞–Ω–∏–µ:<b>{item[0]}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{item[1]}</b>')
        await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
    await rq.del_calculate(callback.message.chat.id)
    await state.clear()


@router.callback_query(F.data.startswith('–∏–∑–º–µ–Ω–∏—Ç—å—à—Ç:'))
async def update_second(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UpdateItem.title)
    res = callback.data.split(':')[1]
    await state.update_data(title=res)
    await state.set_state(UpdateItem.change)
    await callback.message.edit_text('‚¨áÔ∏è–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨áÔ∏è', reply_markup=await kb.choice('–≤—ã–±–æ—Ä—à—Ç'))


@router.callback_query(F.data.startswith('–≤—ã–±–æ—Ä—à—Ç:'))
async def update_third(callback: CallbackQuery, state: FSMContext):
    res = callback.data.split(':')[1]
    await state.update_data(change=res)
    await state.set_state(UpdateItem.number)
    await callback.message.edit_text('‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ‚¨áÔ∏è',
                                     reply_markup=await kb.add_nums_two('–∫–ª_3', '–≤–≤–æ–¥4'))


@router.callback_query(F.data.in_(['–∫–ª_3:1', '–∫–ª_3:2', '–∫–ª_3:3', '–∫–ª_3:4', '–∫–ª_3:5', '–∫–ª_3:6', '–∫–ª_3:7', '–∫–ª_3:8',
                                   '–∫–ª_3:9', '–∫–ª_3:0', '–∫–ª_3:.', '–∫–ª_3:-']))
async def callback_func_two(callback: CallbackQuery, state: FSMContext):
    user_id, data = callback.message.chat.id, callback.data.split(':')[1]
    try:
        await rq.calculate_str(user_id, data)
    except Exception as exp:
        await callback.answer(f'{exp}')
    num_data = await rq.get_calculate(user_id)
    await state.update_data(number=num_data)
    await callback.message.edit_text(f'{num_data}·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ',
                                     reply_markup=await kb.add_nums_two('–∫–ª_3', '–≤–≤–æ–¥4'))


@router.callback_query(F.data.endswith('–≤–≤–æ–¥4'))
async def update_fourth(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(f'–ß–∏—Å–ª–æ {data["number"]} –ø—Ä–∏–Ω—è—Ç–æüìù')
    if data['change'] == '-':
        try:
            await rq.upgrade_item_number(data["title"], data["number"], data["change"])
            item = (await rq.show_item(data["title"])).fetchone()
            await callback.message.answer(f'–¢–æ–≤–∞—Ä —É–º–µ–Ω—å—à–µ–ΩüóÇ\n–ù–∞–∑–≤–∞–Ω–∏–µ:<b>{item[0]}</b>\n–®—Ç—É–∫–∏: <b>{item[2]}</b>')
            await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
        except ValueError as err:
            await callback.message.answer(f'‚õîÔ∏è{err}‚õîÔ∏è', reply_markup=kb.main)
    elif data['change'] == '+':
        await rq.upgrade_item_number(data["title"], data["number"], data["change"])
        item = (await rq.show_item(data["title"])).fetchone()
        await callback.message.answer(f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–ΩüóÇ\n–ù–∞–∑–≤–∞–Ω–∏–µ:<b>{item[0]}</b>\n–®—Ç—É–∫–∏: <b>{item[2]}</b>')
        await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
    await rq.del_calculate(callback.message.chat.id)
    await state.clear()


@router.callback_query(F.data.startswith('items'))
async def show_sort_alphabet(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è')
    await callback.message.edit_text(
        '‚¨áÔ∏è–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ‚¨áÔ∏è',
        reply_markup=await kb.items_view('alphabet', '–æ—Å—Ç–∞—Ç–æ–∫'))


@router.callback_query(F.data.startswith('–ø–æ–∏—Å–∫'))
async def item_find(callback: CallbackQuery, state: FSMContext):
    await state.set_state(FindItem.title)
    await callback.message.edit_text('‚¨áÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞‚¨áÔ∏è')


@router.message(FindItem.title)
async def add_third(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    data = await state.get_data()
    await message.answer('‚¨áÔ∏è–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞‚¨áÔ∏è', reply_markup=await kb.find_items(data["title"]))


@router.callback_query(F.data.endswith('–æ—Å—Ç–∞—Ç–æ–∫'))
async def show_sort(callback: CallbackQuery):
    await callback.answer('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞')
    type_sort = callback.data.split(':')[0]
    await callback.message.edit_text(
        '‚¨áÔ∏è–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–∫–ª–∞–¥–µ‚¨áÔ∏è',
        reply_markup=await kb.items_view(type_sort, '–æ—Å—Ç–∞—Ç–æ–∫'))


@router.callback_query(F.data.startswith('–æ—Å—Ç–∞—Ç–æ–∫'))
async def number(callback: CallbackQuery):
    await callback.answer('–í—ã–±–æ—Ä')
    res = callback.data.split(':')[1]
    item = (await rq.show_item(res)).fetchone()
    await callback.message.edit_text(
        f'–¢–æ–≤–∞—Ä: <b>{item[0]}</b>\n–ö–æ–ª-–≤–æ: <b>{item[1]}</b>',
        reply_markup=await kb.item_change(item[0]))


@router.callback_query(F.data.startswith('add_item'))
async def add_first(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è')
    await state.set_state(AddItem.title)
    await callback.message.edit_text('‚¨áÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è‚¨áÔ∏è')


@router.message(AddItem.title)
async def add_second(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddItem.number)
    await message.reply('‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ‚¨áÔ∏è', reply_markup=kb.add_nums)


@router.callback_query(F.data.in_(['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '.', '-']))
async def callback_func(callback: CallbackQuery, state: FSMContext):
    user_id, data = callback.message.chat.id, callback.data
    try:
        await rq.calculate_str(user_id, data)
    except Exception as exp:
        await callback.answer(f'{exp}')
    num_data = await rq.get_calculate(user_id)
    await state.update_data(number=num_data)
    await callback.message.edit_text(f'{num_data}·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ', reply_markup=kb.add_nums)


@router.callback_query(F.data.endswith('–≤–≤–æ–¥'))
async def add_fourth(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(f'–ß–∏—Å–ª–æ {data["number"]} –ø—Ä–∏–Ω—è—Ç–æüìù')
    try:
        await rq.add_item(data["title"], data["number"])
        await callback.message.answer(
            f'–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–ΩüóÇ\n–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data["title"]}</b>\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{data["number"]}</b>')
        await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
    except Exception as err:
        await callback.message.answer(f'‚õîÔ∏è{err}‚õîÔ∏è', reply_markup=kb.main)
    await rq.del_calculate(callback.message.chat.id)
    await state.clear()


@router.callback_query(F.data.startswith('add_sticker'))
async def add_first(callback: CallbackQuery, state: FSMContext):
    await callback.answer('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∫–ª–µ–π–∫–∏')
    await state.set_state(AddSticker.title)
    await callback.message.edit_text('‚¨áÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–∫–ª–µ–π–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è‚¨áÔ∏è')


@router.message(AddSticker.title)
async def add_second(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddSticker.volume)
    await message.reply('‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º‚¨áÔ∏è', reply_markup=await kb.add_volume())


@router.callback_query(F.data.in_(['–∫–ª_—Å—Ç–∏–∫–µ—Ä:0,2', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:0,45', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:0,9', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:1',
                                   '–∫–ª_—Å—Ç–∏–∫–µ—Ä:2,7', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:4,5', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:5', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:9',
                                   '–∫–ª_—Å—Ç–∏–∫–µ—Ä:18', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:kg 1', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:kg 3', '–∫–ª_—Å—Ç–∏–∫–µ—Ä:kg 10',
                                   '–∫–ª_—Å—Ç–∏–∫–µ—Ä:-']))
async def callback_func(callback: CallbackQuery, state: FSMContext):
    user_id, data = callback.message.chat.id, callback.data.split(':')[1]
    try:
        await rq.volume_selection(user_id, data)
    except Exception as exp:
        await callback.answer(f'{exp}')
    volume_data = await rq.get_calculate(user_id)
    await state.update_data(volume=volume_data)
    await callback.message.edit_text(f'{volume_data}·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ·Ö† ', reply_markup=await kb.add_volume())


@router.callback_query(F.data.endswith('–≤–≤–æ–¥3'))
async def add_fifth(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.edit_text(f'–ù–∞–∫–ª–µ–π–∫–∞ {data["title"]} –ø—Ä–∏–Ω—è—Ç–∞üìù')
    try:
        await rq.add_sticker(data["title"], data["volume"])
        await callback.message.answer(
            f'–ù–∞–∫–ª–µ–π–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞üóÇ\n–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{data["title"]}</b>\n–û–±—ä–µ–º—ã: <b>{data["volume"]}</b>')
        await callback.message.answer('–ë–æ—Ç-—Å–∫–ª–∞–¥üì¶\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìú', reply_markup=kb.main)
    except Exception as err:
        await callback.message.answer(f'‚õîÔ∏è{err}‚õîÔ∏è', reply_markup=kb.main)
    await rq.del_calculate(callback.message.chat.id)
    await state.clear()


@router.message(F.text == '–£–¥–∞–ª–∏—Ç—å')
async def item_del(message: Message):
    await message.answer(
        '‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚¨áÔ∏è',
        reply_markup=await kb.items_view('alphabet', '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'))


@router.callback_query(F.data.endswith('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'))
async def show_item_del(callback: CallbackQuery):
    await callback.answer('–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞')
    type_sort = callback.data.split(':')[0]
    await callback.message.edit_text(
        '‚¨áÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è‚¨áÔ∏è',
        reply_markup=await kb.items_view(type_sort, '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'))


@router.callback_query(F.data.startswith('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'))
async def item_del_choice(callback: CallbackQuery):
    res = callback.data.split(':')[1]
    await callback.answer(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {res} ‚ùì', show_alert=True)
    await callback.message.edit_text('–í—ã–±–æ—Ä', reply_markup=await kb.choice_two(res))


@router.callback_query(F.data.startswith('–æ—Ç–º–µ–Ω–∞_—É–¥–∞–ª–µ–Ω–∏—è:'))
async def item_del_cancel(callback: CallbackQuery):
    res = callback.data.split(':')[1]
    await callback.message.edit_text('–û—Ç–º–µ–Ω–∞')
    await callback.message.answer(f'–£–¥–∞–ª–µ–Ω–∏–µ {res} –æ—Ç–º–µ–Ω–µ–Ω–æ‚ùóÔ∏è', reply_markup=kb.main)


@router.callback_query(F.data.startswith('—É–¥–∞–ª–µ–Ω–∏–µ:'))
async def item_del_confirm(callback: CallbackQuery):
    res = callback.data.split(':')[1]
    await callback.message.edit_text(f'–£–¥–∞–ª–µ–Ω–∏–µ {res}')
    await rq.del_item(res)
    await callback.message.answer(f'‚ùå–¢–æ–≤–∞—Ä: {res} —É–¥–∞–ª—ë–Ω‚ùå', reply_markup=kb.main)
